[{"title":"随笔","path":"/2025/01/06/24-25随笔/","content":"342ee3c5b528ca18269dbba281c80c86fa04b83a8e5c16220f02326ebb4eb714d9b7ccb07e406f8723451d819736f40f40ba75ae5b4f6be7c814798daa0470aa93bff51371232a10a06f52838bfa46f7f62609365f84e73a8390605da41435d9a8c8d43ff08e3cc04bf047d58002da56b1fd2b2b09dab7fdbac4ec31ce642daf1a313bb2f5413a7f78f05587b1ffe34f13ba74ae930593f4da931bc72f569a2846439c3eef5e132affd8405b8ac5f95248c37e2424125ff5fb6728542b5cf846367f03de2bbddac7590958b94db9b37fe2e6ca2f0799ea775f5dd393eaceba4188ba77eb7ba14572cb3799137e24137dc1d10b5f812c83b99f81707b34e4c2ceec491005a6835658009f446298a4605b0067367038aa0968dc8c001ca5876172638bc91090f3eb0cea29b72888feb6d76724c877735a31c62f81aee1f7924b6be2eb3f94020c7962e8a4f3c5bc42588b683b4d7f816c739c5911609dc8ac5d64b684e6fa70a108c7583a842859e62244d7c6ae8ed3ca1b2605989d4d7e1a6c8c943b55451f2b4cd28615a5abd24c16b39b80e303adef67ae9b75a4698da32995ffdb88135de18ad392dc577e6bbd90b9ae6c61cd96e83864334921cc2b8a4bb4a6d26388df639c5406eae2606bb75bcdb9f672c080029b1b1d0d2c4a9912a50e111fefe4e9ab7220365bec98a6ced046e6da0c9cef09414ca0ad923faf69a6a73c7db0b67a15293a97e3db0baa0de57c2a3a9f16bd4c094acf8521e73dbbd9ceee0ceb78ee4eccfa0aef5981e856c288c79c610d1e7c49348c1aa21500671410ab32c892c255b4b39dd591071fce4f71bb726548e2ca076856ddf87f91dd8234d0a4a4454ee17ed878a1037eec89c0a203d6fce02d67d3128d004eeb1d5357a63302921bf985a2a6a57ae4f84b3a205fe38b3314fae7e7c0ee264edfc5868ca8f2037f3f1a39e47157d92fe2cd3433190d6d61ee08e6eb6380c6888441269688942c093630ecac73254f24a9c153073c218e8a61f689f7750be6cff983f83e79b2631309a81bf984f663fd21da6ad208875cd681d4fab14c33e976bedbfa5d427dc46eac22eccd7cc6091642e031377caeaffc2f9940b1c8f83996cf2b8719396898ce313b8b6daf636e1098782364e4c220282f082f609012fb7f13c1680966f14c9cae18bf53f90f2654d5d93d8bcabbf1951550feb6eddf4189f13baa6c123948aee4a62370bae004c3e3a969828565675b846a0c9aea9309239bd63babbb14c93814f8721f5c1634b03950e88face93d211364aab6c6e0088906c8bffbe80ef600dfa415660dd92dc152a58bd0c4d8b079284c7736b21a444fcde45f8a2b1d5dd42ed45e3b4b0950641459f06448d024ce687c6337b3e8657994ef14cc30c5e883caee31d665210e469ed0839d1f6fce8c759e36e68a00343260ce17d8acac113c34d42c6869ce9f90939b20bbec0980833ef94c8c61f4471cc995b764c8b65aae5905628f41d01d842d84846e759a8293411d3970176b999e8ac5ab5ccd271c56056d6122deeeff0b2af890f08b312537ebcfddf0778f5ed20a5afbdd05f7741ccbd13f1684f9662baf4ac14b57f786c40907d589e887031612b66f8844bec3a8a233fc502c244b5f56da9454062ecd092e6b8c1cdad28b21ffcbde9016c7e8a53a3f7dca885e9492e7023a799cc913f9c90c69515cdd70bb2248d92b32a0507310d6019f6abbda9026701d0a32d881379ccb543274a9fd6030bc451fe54b09ae4946d921366b94764923d26420c4862b0f122f71fb54806c269441ce938f5d2079f69b9f644461a71f07ebd7e62fb92506258d49333c7bc1b12b811bb9aa7b4b193e3efa5c688b9b6d4137a760c6c8b31095812bb201f2773846fb8263071062d8069d69ebfa4b90f0e3d041d92965005bad4e152d417067a8cf625afc9b8e284b8e7dd09a2fd79004f39bd67cc44bb5b41d2403b3b095a15e1fe292386c91031fec119bf939c262c24c07f7f2280998b518627352320b043c3bf58996ca6e8d00cd8b0446fecac2c00f99012cea3b72f6817cb180cad16317dd9c8323bcdc3708fdddc23aec6971d13082c88e645f8f387cd50647d6949e4bdfdc080d317c1b097649ed320d901da5d1461dad2ac952e1b1fd668494692068fba246ccda6cd981aba2c8b0a0496145f3927fa542266ba4670936c9149f5caccd1783950ba346af0e494955115a86ed3f93fffe4cfa59397eee2513ed320253a7ea8d76ed1b953d7bd407db9086296ff957fd09156018a23b96b220edd369c33eb198d4e94559f5549cd0f4edafdda2393c53278b871930b9ce9b35a3e9ede0ba6fa4946e989ddb812a85e33cb5876f5de8f6fcdf82c469d5f3e80318f62b18440d6edcc83606e896e8cc36a8617ddc32a7ec0e2cb1a8fc9678ba830d20d8b8807156f05b91a5a50c6b74776f6448a44f2873c9955daaf5994c826e72f89d3fd4fe98a432f23fa3ea1f20ae4d699c770cf0a2de0042111f5e3fa716df86bbefb9cbbb88886321186c19eda1ac07e78d1d74af89ba8757740e642993e013dd5f86d96fdf985cf607bf9b841b266024cdbbb6b1c4f95afd56681cbf852643b667f6919e7c93e696ed15dffff8501bae03405f1809fa208f5f1a9dba16c33ef99ff7eb42beed9ceb65758b08605fcb53155e999950493e12732c76d6e1426408d038be33611126ae16e099d8dd09a443ff92e15f139e9699d4e64fd0142de94b7526536deb16e98ada0fad798a7b54e488afe2dcda290b34ac5b91ebe14229d0c298c9a34b4d49f1353b450f84827ff982c4d4e2f3661dddf71c42b0a4f414c0510af621006e12e765331641c97b04a3b82cd8afa97a1ae98f1971ef957e44a4e3d68c143c8630201733196152b7f2ba115050f9d8c2b273bc8e6f64a9254c9e81f3578dae8d51e563a3699f37126b52ab6117585f1fb1ac357a8d8ac3ce3292b4971eb2ad1996e0486e6585f105342b603c838611da6174363b4409f07fcd1da5332c3c9234e417c4c45d8b24716fbba4cdf0ac9891b4b26e06f7405ef1e6d00f64616b8bb7f767356e27a855d09ad358d2908d83c288961dd3aab670743e290b36b367bf4554ff224e0ff82e6bc50bf311ff43d7cc9a8c75ea45607c05968ce564cdd4f57073192328548ccd01eca92805a7564735b3a8d30ef76e70ea1497da7aeb6e23c6c290ad30bd05f8148321762f490b1f61ff9fee26ca7a2c964408e93f5a5fafd0bd8102426d13e6f3d363542871973f0c02a9ab403ac2457a9e2fde772ffc725501c7ded5854b56105cc8ff7678d7d2cd29249b5ccf7444c60d5883a55078ef4f2f6befa78d3b8bd4d3aa567e3f56a8fd66fea08375b770fc4eda305a3958e0093aa1eeac01001110dedf615cca5138cbd4c9acf0649969f102d7b86f2947d007e58b901a78689d827392cfa1cb564bef462fdc4131fe2adfc3ffbd597e7c2542ab73e430f2ab38377eb42b2f4cf5c0508bb54bf911fe5780ac8b4b980cf98c677d725d4ca879a1eee60dca0e049f2a2fcce8acfe88b6fe7d11753b5c8372a34994af45002a78c3ed9d717ebf7dcd9ca5205e6cea26c3bb3e26d8792b5442462e864a3cf8a72e5c2c0d9f59b8165841d3105b17d0a3d83c04e3ef145c1a736290d4df49e5e7119ade2e5ef7ced8a2e809001717461e369943c8a93fd8809ab5c5e94f479e97ac408ead3fb61745dc13b292f9be7d83da8e5b5af233d36b7ac0d64426750fa9125b1d3eeb5f96148b5f91de839dcbc78bbf7e10064d5abc10af510a742f3128f909466e30eeb16f3a15427e1296c877039c29ff4fcfdda4a33656c806d9f9404f32918f1c1ecdc8cb35a3331df000a240db3e1bae7e797077c7bf1651df8bd2362cf79eaf9bdb9fba1fa3f655d9dd5f928258e5ce4926344671b25533ca14d0891c02e97f816da75ea607bd8b30fffe3646183378affef4b805eb12eb6d017201fb8e7b8159c74426bf3bf2aee69914bf458333e475de93a96ed8794c57fc7e413a6e8077d40823c548e45c4af0fff9ae5a2113b6599c11be0fd9b0f267977648f8be9398d72eaa395dd658cd55f3d961d35dd0733e78a245fb04f49ca111f220db41ed4fc2af0e6dcfd0b69121f7ffe0425e5d140b2b4ba6e1877b30c2d627b491bb38e532a5943441fd2a0bd80f09a7fbf3e9593e876ff6538988af7794bdbbc2eb96f59f0924a3ba 无可奈何花落去，似曾相识燕归来","tags":["生活点滴","阅读随笔"]},{"title":"Python实现通讯录系统设计","path":"/2024/12/14/Python 实现通讯录系统设计/","content":"演示代码：代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209import tkinter as tkfrom tkinter import ttk, messagebox, filedialogimport jsonimport osclass Contact: def __init__(self, name, phone, email): self.name = name self.phone = phone self.email = email def to_dict(self): return &#123;&quot;name&quot;: self.name, &quot;phone&quot;: self.phone, &quot;email&quot;: self.email&#125;class AddressBook: def __init__(self): self.contacts = [] # 存储Contact对象列表 def add_contact(self, contact: Contact): self.contacts.append(contact) def delete_contact(self, name): self.contacts = [c for c in self.contacts if c.name != name] def search_contact(self, keyword): # 按姓名或电话搜索 keyword = keyword.strip().lower() return [c for c in self.contacts if keyword in c.name.lower() or keyword in c.phone.lower()] def edit_contact(self, old_name, new_contact: Contact): for i, c in enumerate(self.contacts): if c.name == old_name: self.contacts[i] = new_contact return True return False def load_from_file(self, filename): if os.path.exists(filename): with open(filename, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f: data = json.load(f) self.contacts = [Contact(**item) for item in data] else: self.contacts = [] def save_to_file(self, filename): data = [c.to_dict() for c in self.contacts] with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as f: json.dump(data, f, ensure_ascii=False, indent=4)class AddressBookGUI: def __init__(self, master): self.master = master self.master.title(&quot;通讯录管理系统&quot;) self.address_book = AddressBook() self.filename = &quot;address_book.json&quot; # 初始化界面 self.create_widgets() # 加载数据 self.address_book.load_from_file(self.filename) self.refresh_contact_list() def create_widgets(self): # 搜索框 top_frame = tk.Frame(self.master) top_frame.pack(pady=10) tk.Label(top_frame, text=&quot;搜索（姓名或电话）：&quot;).pack(side=tk.LEFT) self.search_var = tk.StringVar() self.search_entry = tk.Entry(top_frame, textvariable=self.search_var) self.search_entry.pack(side=tk.LEFT, padx=5) tk.Button(top_frame, text=&quot;搜索&quot;, command=self.on_search).pack(side=tk.LEFT, padx=5) tk.Button(top_frame, text=&quot;显示全部&quot;, command=self.on_show_all).pack(side=tk.LEFT, padx=5) # 通讯录列表 self.tree = ttk.Treeview(self.master, columns=(&quot;name&quot;, &quot;phone&quot;, &quot;email&quot;), show=&#x27;headings&#x27;, height=10) self.tree.heading(&quot;name&quot;, text=&quot;姓名&quot;) self.tree.heading(&quot;phone&quot;, text=&quot;电话&quot;) self.tree.heading(&quot;email&quot;, text=&quot;电子邮件&quot;) self.tree.column(&quot;name&quot;, width=100) self.tree.column(&quot;phone&quot;, width=100) self.tree.column(&quot;email&quot;, width=150) self.tree.pack(pady=10) # 按钮区域 btn_frame = tk.Frame(self.master) btn_frame.pack() tk.Button(btn_frame, text=&quot;添加联系人&quot;, command=self.on_add_contact).pack(side=tk.LEFT, padx=5) tk.Button(btn_frame, text=&quot;编辑联系人&quot;, command=self.on_edit_contact).pack(side=tk.LEFT, padx=5) tk.Button(btn_frame, text=&quot;删除联系人&quot;, command=self.on_delete_contact).pack(side=tk.LEFT, padx=5) tk.Button(btn_frame, text=&quot;保存到文件&quot;, command=self.on_save).pack(side=tk.LEFT, padx=5) tk.Button(btn_frame, text=&quot;从文件加载&quot;, command=self.on_load).pack(side=tk.LEFT, padx=5) def refresh_contact_list(self, contacts=None): # 清空列表 for i in self.tree.get_children(): self.tree.delete(i) # 显示所有或指定的联系人 if contacts is None: contacts = self.address_book.contacts for c in contacts: self.tree.insert(&quot;&quot;, tk.END, values=(c.name, c.phone, c.email)) def on_search(self): keyword = self.search_var.get().strip() if keyword: result = self.address_book.search_contact(keyword) self.refresh_contact_list(result) else: messagebox.showinfo(&quot;提示&quot;, &quot;请输入搜索关键词！&quot;) def on_show_all(self): self.refresh_contact_list() def on_add_contact(self): AddEditDialog(self.master, self, mode=&quot;add&quot;) def on_edit_contact(self): selected = self.tree.selection() if not selected: messagebox.showwarning(&quot;警告&quot;, &quot;请先选择要编辑的联系人！&quot;) return item = self.tree.item(selected[0]) old_name, old_phone, old_email = item[&#x27;values&#x27;] AddEditDialog(self.master, self, mode=&quot;edit&quot;, old_name=old_name, old_phone=old_phone, old_email=old_email) def on_delete_contact(self): selected = self.tree.selection() if not selected: messagebox.showwarning(&quot;警告&quot;, &quot;请先选择要删除的联系人！&quot;) return item = self.tree.item(selected[0]) name = item[&#x27;values&#x27;][0] if messagebox.askokcancel(&quot;确认&quot;, f&quot;确定删除联系人 &#123;name&#125; 吗？&quot;): self.address_book.delete_contact(name) self.refresh_contact_list() def on_save(self): self.address_book.save_to_file(self.filename) messagebox.showinfo(&quot;提示&quot;, f&quot;通讯录已保存到文件 &#123;self.filename&#125;&quot;) def on_load(self): file_path = filedialog.askopenfilename(title=&quot;选择通讯录文件&quot;, filetypes=[(&quot;JSON Files&quot;, &quot;*.json&quot;)]) if file_path: self.address_book.load_from_file(file_path) self.refresh_contact_list() messagebox.showinfo(&quot;提示&quot;, &quot;已从文件加载通讯录！&quot;)class AddEditDialog(tk.Toplevel): def __init__(self, master, parent_gui, mode=&quot;add&quot;, old_name=&quot;&quot;, old_phone=&quot;&quot;, old_email=&quot;&quot;): super().__init__(master) self.parent_gui = parent_gui self.mode = mode self.old_name = old_name self.old_phone = old_phone self.old_email = old_email if self.mode == &quot;add&quot;: self.title(&quot;添加联系人&quot;) else: self.title(&quot;编辑联系人&quot;) tk.Label(self, text=&quot;姓名：&quot;).grid(row=0, column=0, pady=5, padx=5, sticky=tk.E) tk.Label(self, text=&quot;电话：&quot;).grid(row=1, column=0, pady=5, padx=5, sticky=tk.E) tk.Label(self, text=&quot;电子邮件：&quot;).grid(row=2, column=0, pady=5, padx=5, sticky=tk.E) self.name_var = tk.StringVar(value=self.old_name) self.phone_var = tk.StringVar(value=self.old_phone) self.email_var = tk.StringVar(value=self.old_email) tk.Entry(self, textvariable=self.name_var).grid(row=0, column=1, pady=5, padx=5) tk.Entry(self, textvariable=self.phone_var).grid(row=1, column=1, pady=5, padx=5) tk.Entry(self, textvariable=self.email_var).grid(row=2, column=1, pady=5, padx=5) btn_frame = tk.Frame(self) btn_frame.grid(row=3, column=0, columnspan=2, pady=10) tk.Button(btn_frame, text=&quot;确定&quot;, command=self.on_ok).pack(side=tk.LEFT, padx=10) tk.Button(btn_frame, text=&quot;取消&quot;, command=self.destroy).pack(side=tk.LEFT, padx=10) def on_ok(self): name = self.name_var.get().strip() phone = self.phone_var.get().strip() email = self.email_var.get().strip() if not name or not phone: messagebox.showwarning(&quot;警告&quot;, &quot;姓名和电话为必填项！&quot;) return new_contact = Contact(name, phone, email) if self.mode == &quot;add&quot;: # 添加新联系人 self.parent_gui.address_book.add_contact(new_contact) else: # 编辑联系人 success = self.parent_gui.address_book.edit_contact(self.old_name, new_contact) if not success: messagebox.showerror(&quot;错误&quot;, &quot;编辑联系人失败！&quot;) return self.parent_gui.refresh_contact_list() self.destroy()if __name__ == &quot;__main__&quot;: root = tk.Tk() app = AddressBookGUI(root) root.mainloop() 地址json文件： 1234567891011121314151617181920212223242526272829303132[ &#123; &quot;name&quot;: &quot;张三&quot;, &quot;phone&quot;: &quot;123456789&quot;, &quot;email&quot;: &quot;zhangsan@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;李四&quot;, &quot;phone&quot;: &quot;987654321&quot;, &quot;email&quot;: &quot;lisi@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;王五&quot;, &quot;phone&quot;: &quot;111111111&quot;, &quot;email&quot;: &quot;wangwu@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;赵六&quot;, &quot;phone&quot;: &quot;222222222&quot;, &quot;email&quot;: &quot;zhaoliu@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;钱七&quot;, &quot;phone&quot;: &quot;333333333&quot;, &quot;email&quot;: &quot;qianqi@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;乙&quot;, &quot;phone&quot;: &quot;234567890&quot;, &quot;email&quot;: &quot;jia@example.com&quot; &#125;] 一、流程图（过程设计图）下面的流程图示意了程序的核心交互与各功能模块之间的关系，可以把它理解成用户使用该通讯录程序时的“操作-响应”流程。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162┌─────────────────────────┐│ 启动程序 ││ (创建主窗口 + 初始化 ││ AddressBookGUI实例) │└────────────┬────────────┘ │ │ (1)加载数据 ▼┌─────────────────────────┐│ load_from_file(filename) ││ 如果文件存在 -&gt; 加载联系人 ││ 否则contacts为空列表 │└────────────┬────────────┘ │ │ (2)主界面 ▼┌─────────────────────────┐│ 主界面显示联系人列表 ││ 提供以下功能按钮： ││ 1) 搜索联系人 ││ 2) 显示全部 ││ 3) 添加联系人 ││ 4) 编辑联系人 ││ 5) 删除联系人 ││ 6) 保存到文件 ││ 7) 从文件加载 │└────────────┬────────────┘ │ ├───────── [搜索联系人] ──────────┐ │ │ │ (3a) 用户输入搜索关键词 │ │ -&gt; 调用search_contact │ │ -&gt; 刷新列表只显示匹配结果 │ │ │ ├───────── [添加联系人] ──────────┐ │ │ │ (3b) 弹出对话框AddEditDialog │ │ -&gt; 用户输入姓名/电话等信息│ │ -&gt; AddressBook.add_contact │ -&gt; 刷新联系人列表 │ │ │ ├───────── [编辑联系人] ──────────┐ │ │ │ (3c) 选中某联系人，弹出AddEditDialog │ -&gt; 编辑并更新到AddressBook │ -&gt; 刷新联系人列表 │ │ ├───────── [删除联系人] ──────────┐ │ │ │ (3d) 选中某联系人 -&gt; delete_contact │ -&gt; 刷新联系人列表 │ │ ├───────── [保存到文件] ──────────┐ │ │ │ (3e) save_to_file(filename) │ │ -&gt; JSON格式写入 │ │ │ └───────── [从文件加载] ──────────┘ │ ▼ load_from_file(用户选择的文件) -&gt; 刷新联系人列表 收起 流程图解释： 启动程序：运行 address_book.py 或 tongxunlu.py 时，会创建 Tk 主窗口，并实例化 AddressBookGUI。 加载数据：在 AddressBookGUI.__init__ 里，通过 load_from_file 尝试加载保存的 JSON 文件。如果文件存在且数据正确，就把读取的列表转成 Contact 对象存进 contacts 列表；若不存在则为空。 主界面：Tkinter GUI界面呈现在用户面前，显示联系人列表 + 功能按钮。 用户在主界面可执行以下操作： 搜索联系人：在搜索框里输入姓名或电话的关键词，调用 AddressBook.search_contact 返回匹配结果，并刷新列表。 添加联系人：弹出对话框输入姓名、电话、Email，确认后将新 Contact 对象加入通讯录并刷新列表。 编辑联系人：选中一行并点击编辑，弹出对话框修改信息；调用 AddressBook.edit_contact 更新后刷新。 删除联系人：选中一行并点击删除，调用 AddressBook.delete_contact 删掉匹配的对象。 保存到文件：调用 save_to_file(filename)，将当前联系人列表序列化为JSON并写到本地。 从文件加载：打开文件选择对话框，加载选定的 JSON 文件。 二、功能与模块分析下面列出该项目的主要功能模块及其实现思路、关键步骤。与前述流程图对应，这些步骤有助于理解代码的逻辑结构与数据流向。 1. 数据结构模块 Contact类 用于封装单个联系人的信息：name, phone, email。 to_dict()方法可把对象转成字典，以便JSON序列化存储。 AddressBook类 内含一个列表 self.contacts，每个元素都是 Contact 对象。 提供对联系人增删改查的方法： add_contact(contact) delete_contact(name) search_contact(keyword) edit_contact(old_name, new_contact) 提供文件读写方法： load_from_file(filename): 读取JSON文件并转成 Contact 对象列表 save_to_file(filename): 将 contacts 列表序列化写入JSON文件 2. GUI界面（Tkinter）模块 主窗口 AddressBookGUI 初始化 ： 创建 AddressBook 实例 定义存储文件名（如 address_book.json） 调用 load_from_file 加载通讯录数据 构建并摆放各种UI组件（搜索框、按钮、TreeView列表等） 核心功能按钮 ： 搜索：读取搜索框内容 -&gt; 调 search_contact -&gt; 刷新列表 显示全部：直接显示所有 contacts 添加联系人：弹出对话框 AddEditDialog(mode=&quot;add&quot;)；成功后刷新列表 编辑联系人：选中联系人，带着旧信息进入对话框；成功编辑后刷新列表 删除联系人：选中联系人 -&gt; delete_contact -&gt; 刷新列表 保存到文件：save_to_file -&gt; 序列化到 JSON 从文件加载：打开文件对话框选择文件 -&gt; load_from_file -&gt; 刷新列表 TreeView 组件 用于在主窗口中央显示联系人信息的表格。 每行对应一个 Contact，包含姓名、电话、电子邮件三列。 通过 refresh_contact_list(contacts=None) 方法刷新表格显示数据。 添加&#x2F;编辑联系人对话框 AddEditDialog 当点击“添加联系人”或“编辑联系人”时弹出。 包含姓名、电话、电子邮件三个 Entry 输入框和“确定&#x2F;取消”按钮。 如果是添加模式(mode=&quot;add&quot;)：填完信息后调用 address_book.add_contact()。 如果是编辑模式(mode=&quot;edit&quot;)：带入旧的信息；用户修改完点击确定后，调用 address_book.edit_contact(old_name, new_contact)。 3. 文件读写与JSON格式 保存文件 (save_to_file) 将 contacts 列表里的 Contact 对象转成字典 [c.to_dict() for c in self.contacts]。 调用 json.dump(data, f, ensure_ascii=False, indent=4) 写入本地JSON文件。 JSON大致格式: 123456789101112[ &#123; &quot;name&quot;: &quot;张三&quot;, &quot;phone&quot;: &quot;123456&quot;, &quot;email&quot;: &quot;zhangsan@example.com&quot; &#125;, &#123; &quot;name&quot;: &quot;李四&quot;, &quot;phone&quot;: &quot;987654&quot;, &quot;email&quot;: &quot;lisi@example.com&quot; &#125;] 加载文件 (load_from_file) json.load(f) 解析JSON文件，得到一个列表。 列表内每个元素是一个dict，包含&quot;name&quot;, &quot;phone&quot;, &quot;email&quot;等字段。 循环创建 Contact(**item) 并加入 contacts。 4. 异常处理与扩展 如果JSON文件不存在或格式不对，会抛异常或导致读取失败。 可以在加载阶段做额外的防护，如捕获 JSONDecodeError，在界面弹出友好提示；或自动初始化空列表。 界面美化可使用 ttk.Style 或改进布局管理。 实际项目中往往需要数据库持久化或更多字段（地址、备注、生日等），原理与本示例相同，但需要额外的数据结构和表单输入。 测试截图： ![cd47201c6a77b0e0a9c4bdaa8d28c76](C:\\Users\\wxi7641\\Documents\\WeChat Files\\wxid_pyp924ky216w22\\FileStorage\\Temp\\cd47201c6a77b0e0a9c4bdaa8d28c76.png)"},{"path":"/2024/07/24/Markdown语法综述/","content":"什么是Markdown? Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。 Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。 Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 Markdown 编写的文档后缀为 .md, .markdown。 为什么要使用Markdown Markdown 可以用于一切。包括可以使用它来创建网站、文档、笔记、书籍、演示文稿、电子邮件和技术文档。 Markdown 具有可移植性。包含 Markdown 格式文本的文件几乎可以使用任何应用程序打开。如果不喜欢当前使用的 Markdown 应用程序，则可以将 Markdown 文件导入另一个 Markdown 应用程序。 Markdown 独立于平台。可以在任何运行任何操作系统的设备上创建 Markdown 格式的文本。 Markdown 是面向未来的。即使使用的应用程序在未来某个时候停止工作，仍然可以使用文本编辑应用程序阅读 Markdown 格式的文本。 Markdown 无处不在。Reddit 和 GitHub 等网站都支持Markdown，许多桌面和基于 Web 的应用程序也支持它。 Markdown基本语法1. 标题使用 # 加空格来添加标题，其数量即为标题等级，一般只能做到1-6级。 [!标题演示] 一级标题二级标题三级标题四级标题五级标题六级标题 3. 段落格式(1)段落段落的换行有两种方式： 第一种是直接在段落末尾加两个空格 第二种是在段落下一行使用空格两种方式都可，区别在之间的间距。如果你转换md-html，你可以看到第一种：123&lt;p&gt;这是第一段的第一行。&lt;br&gt;这是第一段的第二行。&lt;/p&gt; 第二种：1234&lt;p&gt;这是第二段的第一行。&lt;/p&gt;&lt;p&gt;这是第二段的第二行。&lt;/p&gt; 这就是两者之间的差别。 (2)字体markdown有很多修饰字体的方法，如斜体、粗体、粗斜体、添加删除线等 我是斜体 斜体 在文字左右用*或_修饰我是粗体 粗体 同斜体符号，使用两个一样的我是粗斜体 粗斜体 同上，使用三个一样的我是删除线 删除线 使用两个~我是下划线 下划线 使用u标签&#x3D;&#x3D;我是高亮&#x3D;&#x3D; 高亮 使用两个= 为保护兼容性，推荐使用* 而不是_，此外，下划线在如果支持html的md编辑器里可以用u标签，有些没有兼容的编辑器可能有其他方法，在此不赘述。 (3)脚注对文本补充说明创建脚注引用，可以在[]内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注引用与脚注本身相关联 — 在输出中，脚注是按顺序编号的。[^1] [要注明的文本 ] : 脚注允许您添加注释和引用，创建脚注时，添加脚注引用的位置会显示一个带有链接的上标编号。读者可以点击链接跳转到页面底部的脚注内容。(若没有则是编辑器不支持) 4.列表(1)有序列表有序列表使用数字并加上 . 号再加上空格来表示 第一项 第二项 第三项 (2)无序列表无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，注意这些标记后面要添加一个空格 第一项 第一项 第一项 (3)任务列表任务列表（也称为清单和待办事项列表）允许创建带有复选框的项目列表。使-和[] 加空格来创建，要选中复选框，在之间添加一个x. 12- [x] a- [ ] b a b (4)列表嵌套只需在子列表中的选项前面添加两个或四个空格即可 1234561. 第一项： - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项： - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示结果： 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 5. 区块 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号 另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推： 123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 显示结果： 最外层 第一层嵌套 第二层嵌套 此外，区块和列表在使用时有很多嵌套方式 区块中使用列表 12345&gt; 区块中使用列表&gt; 1. 第一项&gt; * 第一项&gt; + 第二项&gt; - 第三项 显示： 区块中使用列表 第一项 第一项 第二项 第三项 列表中使用区块需要在&gt;前添加四个空格的缩进。1234* 第一项 &gt; first &gt; second* 第二项 显示： 第一项 firstsecond 第二项 6. 代码单个函数或代码片段使用&#96; &#96;&#96;来包括使用；代码区块 使用 4 个空格或者一个制表符（Tab 键) 使用tab 使用空格 三个点号 7. 链接链接使用方法如下： 123`[链接名称](链接地址)``或者``&lt;链接地址&gt;` 可以跟脚注连用 [!连接展示]这个链接用 1 作为网址变量 [Google][1]然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ 8. 图片图片语法格式如下： 123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 方括号，里面放图片的替代文字，普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。与链接一样可以与脚注连用，不在演示。 9. 表格 制作表格使用 |来分隔不同的单元格，使用 - 来分隔表头和其他行。 1234| 表头 | 表头 || ---- | ---- || 单元格 | 单元格 || 单元格 | 单元格 | 展示： 表头 表头 单元格 单元格 单元格 单元格 可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。 :- 设置内容和标题栏居左对齐。 :-: 设置内容和标题栏居中对齐。 1234| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 | 展示： 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 注：表格的上下两行不宜有字。 参考资料：Markdown Guide_https://www.markdownguide.org/菜鸟教程Markdown 教程 | 菜鸟教程 (runoob.com)维基百科_ https://zh.wikipedia.org/wiki/Markdown","tags":["基础语法","开发工具"]},{"title":"基于java+mvc框架的铁路订票系统设计","path":"/2024/07/23/基于java+mvc框架的铁路订票系统设计/","content":"4779471a1ce3b57395ba4ff07f960cd0e0e9db3449f01f2d42355b6a699f83a1045053bf4273182c946c2ad301fdce7cd789a9cf0ab26ee7fbc1de2783997e6b3b06f28d3155feb7131b3056ab0bcb110600f2b24642b6aa9a976d10a1ce6f5feb8d6cd0373b22377b1823f6fc07989e1557c8c02a4ec7b18b224cbd5afb09c580581e943d45a2ccc5a9c7ee6dfd2145eb3cf232fa0a3f9144d61ab14f750dbb8105a65c4e1dedd4b362a053d2a323a539f9dc9b2f945e428afd2c02efed15bb9182707ae147470f297fc5458e98c900d4eb9dd1bc2a7f35c53c245c94a42cfd72ae37915f8a67368e3ec7f028039950d01d7912c9f4220d59189c2565de83d1bff84deb083d6ca9792b42aa18dacef3d199c3f3d232ee85247614f5449b5454194cf20d2e1c337cc9dd397942acaa6f8eae773b06a4e451f20701b6ca2ed9f57c285a2ca3184cdb5bf576d9493feb1038e672fbd9725cc5d85d0fb75220880f3610b8e2341213a016e53179e84480d8bc02fc8fdefd4d6451916b5485b4ab9e987e77cf9fe66341040ab8ff3586526b290700fca1f10814798ca9de70447fc96cce3a4ee2f834227572c8138b28d95a5f0a73fa8bb0856a60c1b22c3d07165ae74ca9ec033ec382da3f86c2f4f15030c0a13e50ea52a960152bda9587c425280eb7328b5e051c38770c33561518a81129c1faa2634211c1c00f42bd8571683d8e9604fecfd98ff5bde213bd793407fe1811b783243fd9e5579d031ebab478dea63aa8527495a29fb105cb1ca775d777 Hey, password is required here."},{"title":"随笔","path":"/2024/06/16/随笔6.17/","content":"11d60f70a9cc633cf4e53b6875306b4ec20777d8cb2bd0cbea36467e57279e2659679ffdef4dfc7c64fb766f6e883064dc2157e233225e7ac00e728fc84d670350345eb228b079cea360b01afe7a5c2ff7c308dbb734d71c07182a0df51c69d587b1ff20141c1d8e2410baa79b62a6e321ccff1712937f87d9bbaff3ff11e0a88f3ebe8a4bcd7323f9cf2dbdbc477ed1f6d0670a658412e98387d9d25ad2456cf0072dfebaec08019953b89cfdc6c9362b546a462a22902d4eadfd87ef11a36bad1b1de420fc3c9682c1622139f4551c7a2f6d4423cb08e3b7d09854d67e258fcbb4065a211f3efe1c66cbe7b0445a7417a581c4dbc655f53c8f71916c6292060cf1cae1005623b20860de4e1c3ecaaea4417df9d029fbf8635c7806480c5ab1b773cd0454ff42804010c6ce3e78f400ff4e85440aab16173eb2db6129c3dd9f44785c14ec6ee58105201ef6be93ee95a2bef859bedd2c876f7564c47f006c3e31ea948e0dc4fd0ed4758c2b717210f11f72ea2da7ac41ddd1dc979aaf6b9b65ee4cdad481ad7b5fe53b412fa1cc44ef71c2aef31b9868f50b56dbc45b58d99ac7853156fb36e79734d293a1ce36bfb5c6f9e86275c962d4fa8443d37f2b33d6f792bfe5c8f0dee411e7da4c04c7b507ba951d0eb5799b4b0abfdb2cc4f2df9642d0efe953d2e71257d9c1f55a5175728e4ca2f7b6a4b06b594d386086c6d0f48155bba6138e61fcbc34caf3e326ad4d25514ee5ab04f4697bfe1affd3e1467b456bc6de8ab6fcee2fadd4541fe78864d00fe128d302f37313ef4db014ec705923b8c02c317c8778fecc84e46563b7c618b9c51d7057f4d4c3e2efce38f45a829c39389951a30036aee34778de1ae271 大梦三千如幻，醒时一枕黄粱","tags":["生活点滴","阅读随笔"]},{"title":"Hello World","path":"/2024/03/31/hello-world/","content":"05b5906c89d9ef5960256fbcf4ec6cc8e5d1d4ab550e00b63604d83086c980065a08daa31ba50bc742cc5963a3f5846886e5fad35243565e4e12ee26f1d8eb10d43af57d9de033ac8c5fd45faae017cda3ef4cb328b6c8654dfce39f89862922c3c4ebadbb4d2b297f05f4d239d587e1c4693d51bcf99b224c9ebd0fd8c0221fe3caa1f3d88ea11bf128697ffe1245f605fd5272f1bf993c3223fe0889ff7f8cd9c70aed9bcc0103bc154277f4c190502f34a2a27e98d7d53d905dfe67c4b02dcec2e65e0afaaf70a002b1d70ed4a8431abaa87c10e01d2940104da8c3a880f82f111a426e6c124539c6fd945bee716c423be62da83e75f756ca4ed53434015f70d8e6ee6a2106a35cdec7d495496a998b058e5fccb9d6bd2f58934d7952389ef72a75d639555ebff690019bde5369b45e3b59c9a3cc32ac2912a9f4715eb108aaa33169ee4d9a2514cdfd80b796d64e6be63bba75c7db0fee0c664098de055893b94483493b75fe165ca0fa56619aa6b8629d8f98db3e0d1f22fad70bc533d7e846ab87bd8119899d979b1fe0aeea7bf9c22752d4956797affdc15e0e67499f624f94122d4eaabc543d832b88787a6e0c18cef6cecc0672b132705a912cefb03218d01f1fe42625bc4472d81e7737d24bab88a13b057e87263a1f7b7267093f08806d2de97f1c303c2efaadb5031ee493fc4c630367b7292e012c6d8e07ab170418911eff02dd450fa216516bcd178c309cdffde95e9115fdd8797664166f4ebebd1411b5d6cb2a45ca385cac6eb634ad35ea8ccbadb44651a7f298680c311d57e79329abcb1668146a1c5f45bc7943e811f436c077ff0b126e4f55f9adc0ca73d8a868065ccc81f4d8f298e0ddcf21803b94fd4dc9c10ff405f0f96ff07fc5c10fd0654d53335bf2492aee00d76ffc4d5ac6e0e358296d112bf3246f7fee58fa80b1a1f412308805b6c7eeb54ee2f64d56c9440a2b3da7e663d984d0821eccff04c7ad1b9c0f1182090267981f8d535d48a73072a20d2ad06f16d264d7630cfd2f28bbf145685e2e0f0f0c7d948e868f7233edf10465e7ab2be590f17a0f912ff2c916e0d5f79ccf993c217cca3ebe966def66d282da85fc08ddcb8b461b9fb8195ec0dbbcbb55f81ec58c66b378e41c8a537f6588d967549c546d7641b673c447c78f85ac4796d99c69c2d43ccc4432f6d57ec4ad52656941e8ea95a2908f9f1b02b235abe78783ab3b6269f3ebbbca65217afb0ff877d8bf3f931d2b44c3eff54458259d085a1d4439acbd97df3789efe73caab030987c9dd4b5e349d0180693260d5f2472782831f7e047a07a908d16db1c0ee113a3139e0931cefcd824c103fd0fd9bb18c9bb73a04f0229006542232b57f43cc13030ee8c34fd024cc2308c4d8b4b77744255270e147fea8dd1f5d78f399414b1873fec73c0d40ea1c319cc2b254f23c08844eb16ce9b2fd7d2566e63465001071ae0e3eb235b20a8b3d879c7854a71c5334f650ee4555f5320cf53d3b24fe2575f264890a9b8a7eac793870c242f79ddaed9b1211bc2780594be598803f037162e63b8234dab96bb55780f03ba24c7c89c31ee4482d7449dd091ee9262beb9fb6e15135f3519f45668ad1a82ec70bf36d64d6fafc388cd456f62ee433ec814b96c27927d937dfd4174b281f04c08a65052f471bead7918c1ebcd32f90778543629a290a76881d460b520308a18a622920c96f99dd7463655703c237b1bad6f6a08a6634d0cb59411bd688da6074f2eb648c7e119cffeca91af43de10a47fa82d4daf49b2e8a3c0e3485c6d941a040bb61a78f5bc41f9a46cce19d75a63e86b21bc2fee845bec9bc0fef9c617421bc43d8a9e45820874d99046f2efad543f0a7371c1d1f5fc06be6cbba80b2f14bf206ff2626c3cad61ce8cb31c2170c6b781792ab6ebe96ef633cdec29fdee17407ac6146328b37380c99cbbbf3ae4fa966f95dc57b0279dc9206cec6a66996dc523880efa6ed1d60a6a765c39b4cd0859e0f713051f247017700a7d3fc7fbe9d409cb3e6aa45d8e4ae1585f93bade3aa4e5af6db7594e8d68951eab6a0a4371219be24c60fc142fffdd4ac17dbe20755554e9f26d76615892df9bd1a12cde38ccab7e6213dfd0f57015af62d847f05e97cf290285d98da713559bdec909f3acc0c14d3f12d6e5f7ce984b563d75fd429b92b11f0b39ee662558ca26ccd1cea28162c934f7d2f5cf7c1867b15d3d1912d649fcaef0af99f456fbd54465251c911e409f05e02e4a706aa25a268b22014d2cf183144122499b057036a1cd8bb55b27aada7156dd47af7a5ef72d8f356437a76f019249ea1322757c04012195d0786f3b2b23df470fe60f95ce1350ffed47e81d7e3bbafb0fedf2e668d2183f575a6e8d603ebaacccf846933e16d1ef0afebcc09bd579de17063d3b3ee46e1c57fead4e2466e7fef02dcaa803f29330253b9f101649cf4c62e8878faf156a7ca110d7983e2e4a5fa18ab33aeddb781668bc3833881f1ed48d1051da5d5376af3293417945f273c215a45fe76cd1d418d47ceeeca08805f98b3df47bedf32c4a2447006e67a75776d850170041cb0766f0357f375cf20ddc2c1a1f4ab4db7ddc0aa4c74744325bc75b6e02ff4d8ddf98890c6bce150acf5b55c162630716aef24f19b35aa8f62826b21865b5e1a91b383b2c51725747f97c38a82fbd1afb57c58c198fd68f4bd291d4c4ce0ca96ba50e07a563bef3ad426e66cde649a268530d25047ccf82005cf353a5f2d12a59c902a2486fac79695151a34d913c41dc36ba9989c63ee18c0cc09d1ae111105a4c0cb131d48eee8cc8bc65b5c102ed2629e599ec98ed8879c00db5170426d0b6a63aa3edbbaca296c9d051b9d8bb928e3ffff43628aa872e6d84ee836e1c0c53 Hey, password is required here."}]